/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.micromanager.multiresviewer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionListener;
import org.json.JSONObject;


/**
 *
 * @author henrypinkard
 */
class DisplayWindowControls extends javax.swing.JPanel  {

   private MagellanDisplayController display_;
   private ListSelectionListener surfaceTableListSelectionListener_;
   private volatile int selectedSurfaceGridIndex_ = -1;
   private ContrastPanel cpMagellan_;

   /**
    * Creates new form DisplayWindowControls
    */
   public DisplayWindowControls(MagellanDisplayController disp, List<JPanel> additionalPanels) {
      //TODO: add these additional panels
      display_ = disp;
      display_.registerForEvents(this);
      initComponents();
      metadataPanelMagellan_.setSummaryMetadata(disp.getSummaryMD());
      this.setFocusable(false); //think this is good 

      //Always start showing contrast
      tabbedPane_.setSelectedIndex(0); 
   }
   

   public void onDisplayClose() {
      display_.unregisterForEvents(this);
   }

   //TODO: something like display_.setOverlayMode(DataViewCoords.EXPLORE); on tab change

   void updateHistogramData(HashMap<Integer, int[]> hists, HashMap<Integer, Integer> mins, HashMap<Integer, Integer> maxs) {
      cpMagellan_.updateHistogramData(hists, mins, maxs);
   }

   public void addContrastControls(int channelIndex, String channelName) {
      cpMagellan_.addContrastControls(channelIndex, channelName);
   }

   public MetadataPanel getMetadataPanelMagellan() {
      return metadataPanelMagellan_;
   }

   public void onNewImage() {
      //once there's an image, surfaces and grids are game
//      tabbedPane_.setEnabledAt(display_.isExploreAcquisiton() ? 2 : 0, true);
      //TODO: inform panels of sumothing
   }
   
   void displaySettingsChanged() {
      cpMagellan_.displaySettingsChanged();
   }

   
   void setImageMetadata(JSONObject imageMD) {
      metadataPanelMagellan_.updateImageMetadata(imageMD);
      updateStatusLabel(imageMD);
   }

   private void updateStatusLabel(JSONObject metadata) {
      if (metadata == null) {
         return;
      }
//      long elapsed = AcqEngMetadata.getElapsedTimeMs(metadata);
      //TODO: fix
      long elapsed = 0;
      long days = elapsed / (60 * 60 * 24 * 1000), hours = elapsed / 60 / 60 / 1000, minutes = elapsed / 60 / 1000, seconds = elapsed / 1000;

      hours = hours % 24;
      minutes = minutes % 60;
      seconds = seconds % 60;
      String h = ("0" + hours).substring(("0" + hours).length() - 2);
      String m = ("0" + (minutes)).substring(("0" + minutes).length() - 2);
      String s = ("0" + (seconds)).substring(("0" + seconds).length() - 2);
      String label = days + ":" + h + ":" + m + ":" + s + " (D:H:M:S)";

      elapsedTimeLabel_.setText("Elapsed time: " + label);
      
      //TODO: fix
      
//      zPosLabel_.setText("Display Z position: " + AcqEngMetadata.getZPositionUm(metadata) + "um");
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      tabbedPane_ = new javax.swing.JTabbedPane();
      contrastPanelPanel_ = new javax.swing.JPanel();
      metadataPanel_ = new javax.swing.JPanel();
      metadataPanelMagellan_ = new org.micromanager.multiresviewer.MetadataPanel();
      topControlPanel_ = new javax.swing.JPanel();
      showInFolderButton_ = new javax.swing.JButton();
      abortButton_ = new javax.swing.JButton();
      pauseButton_ = new javax.swing.JButton();
      fpsLabel_ = new javax.swing.JLabel();
      animationFPSSpinner_ = new javax.swing.JSpinner();
      lockScrollbarsCheckBox_ = new javax.swing.JCheckBox();
      elapsedTimeLabel_ = new javax.swing.JLabel();
      zPosLabel_ = new javax.swing.JLabel();
      scaleBarCheckBox_ = new javax.swing.JCheckBox();

      tabbedPane_.setToolTipText("");
      tabbedPane_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            tabbedPane_StateChanged(evt);
         }
      });

      contrastPanelPanel_.setLayout(new java.awt.BorderLayout());

      cpMagellan_ = new ContrastPanel(display_);
      contrastPanelPanel_.add(cpMagellan_);

      tabbedPane_.addTab("Contrast", contrastPanelPanel_);

      javax.swing.GroupLayout metadataPanel_Layout = new javax.swing.GroupLayout(metadataPanel_);
      metadataPanel_.setLayout(metadataPanel_Layout);
      metadataPanel_Layout.setHorizontalGroup(
         metadataPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(metadataPanelMagellan_, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
      );
      metadataPanel_Layout.setVerticalGroup(
         metadataPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(metadataPanelMagellan_, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
      );

      tabbedPane_.addTab("Metadata", metadataPanel_);

      showInFolderButton_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/micromanager/magellan/folder.png"))); // NOI18N
      showInFolderButton_.setToolTipText("Show in folder");
      showInFolderButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            showInFolderButton_ActionPerformed(evt);
         }
      });

      abortButton_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/micromanager/magellan/abort.png"))); // NOI18N
      abortButton_.setToolTipText("Abort acquisition");
      abortButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            abortButton_ActionPerformed(evt);
         }
      });

      pauseButton_.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/micromanager/magellan/pause.png"))); // NOI18N
      pauseButton_.setToolTipText("Pause/resume acquisition");
      pauseButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pauseButton_ActionPerformed(evt);
         }
      });

      fpsLabel_.setText("Animate FPS:");

      animationFPSSpinner_.setModel(new javax.swing.SpinnerNumberModel(7.0d, 1.0d, 1000.0d, 1.0d));
      animationFPSSpinner_.setToolTipText("Speed of the scrollbar animation button playback");
      animationFPSSpinner_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            animationFPSSpinner_StateChanged(evt);
         }
      });

      lockScrollbarsCheckBox_.setText("Lock scrollbars");
      lockScrollbarsCheckBox_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            lockScrollbarsCheckBox_ActionPerformed(evt);
         }
      });

      elapsedTimeLabel_.setText("Elapsed time (TODO move): ");

      zPosLabel_.setText("Display Z position: ");

      scaleBarCheckBox_.setText("Scale Bar");
      scaleBarCheckBox_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            scaleBarCheckBox_ActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout topControlPanel_Layout = new javax.swing.GroupLayout(topControlPanel_);
      topControlPanel_.setLayout(topControlPanel_Layout);
      topControlPanel_Layout.setHorizontalGroup(
         topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(topControlPanel_Layout.createSequentialGroup()
            .addContainerGap(13, Short.MAX_VALUE)
            .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topControlPanel_Layout.createSequentialGroup()
                  .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(elapsedTimeLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(zPosLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(344, 344, 344))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topControlPanel_Layout.createSequentialGroup()
                  .addComponent(fpsLabel_)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(animationFPSSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(lockScrollbarsCheckBox_)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(scaleBarCheckBox_)
                  .addGap(41, 41, 41))))
         .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topControlPanel_Layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(showInFolderButton_)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(abortButton_)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(pauseButton_)
               .addContainerGap(500, Short.MAX_VALUE)))
      );
      topControlPanel_Layout.setVerticalGroup(
         topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(topControlPanel_Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(animationFPSSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(fpsLabel_))
               .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(lockScrollbarsCheckBox_)
                  .addComponent(scaleBarCheckBox_)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
            .addComponent(elapsedTimeLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(zPosLabel_)
            .addGap(16, 16, 16))
         .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topControlPanel_Layout.createSequentialGroup()
               .addContainerGap()
               .addGroup(topControlPanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(showInFolderButton_)
                  .addComponent(abortButton_)
                  .addComponent(pauseButton_))
               .addContainerGap(77, Short.MAX_VALUE)))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(tabbedPane_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         .addComponent(topControlPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addComponent(topControlPanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(tabbedPane_))
      );

      tabbedPane_.getAccessibleContext().setAccessibleName("Contrast");
   }// </editor-fold>//GEN-END:initComponents

   private void tabbedPane_StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPane_StateChanged
      //TODO: fix this
//      if (display_.isExploreAcquisiton() && exploreButton_.isSelected() && tabbedPane_.getSelectedIndex() == 2) {
//         exploreButton_.setSelected(false);
//      } else if (display_.isExploreAcquisiton() && !exploreButton_.isSelected() && tabbedPane_.getSelectedIndex() != 2) {
//         exploreButton_.setSelected(true);
//      }
//      updateMode();
   }//GEN-LAST:event_tabbedPane_StateChanged

   private void showInFolderButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInFolderButton_ActionPerformed
      display_.showFolder();
   }//GEN-LAST:event_showInFolderButton_ActionPerformed

   private void abortButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButton_ActionPerformed
      display_.abortAcquisition();
   }//GEN-LAST:event_abortButton_ActionPerformed

   private void pauseButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButton_ActionPerformed
      display_.togglePauseAcquisition();
      pauseButton_.setIcon(new javax.swing.ImageIcon(getClass().getResource(
              display_.isAcquisitionPaused() ? "/org/micromanager/magellan/play.png" : "/org/micromanager/magellan/pause.png")));
      repaint();
   }//GEN-LAST:event_pauseButton_ActionPerformed

   private void animationFPSSpinner_StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_animationFPSSpinner_StateChanged
      display_.setAnimateFPS(((Number) animationFPSSpinner_.getValue()).doubleValue());
   }//GEN-LAST:event_animationFPSSpinner_StateChanged

   private void lockScrollbarsCheckBox_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockScrollbarsCheckBox_ActionPerformed
      if (!lockScrollbarsCheckBox_.isSelected()) {
         display_.unlockAllScroller();
      } else {
         display_.superlockAllScrollers();
      }
   }//GEN-LAST:event_lockScrollbarsCheckBox_ActionPerformed

   private void scaleBarCheckBox_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleBarCheckBox_ActionPerformed
      display_.showScaleBar(scaleBarCheckBox_.isSelected());
      display_.redrawOverlay();
   }//GEN-LAST:event_scaleBarCheckBox_ActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton abortButton_;
   private javax.swing.JSpinner animationFPSSpinner_;
   private javax.swing.JPanel contrastPanelPanel_;
   private javax.swing.JLabel elapsedTimeLabel_;
   private javax.swing.JLabel fpsLabel_;
   private javax.swing.JCheckBox lockScrollbarsCheckBox_;
   private org.micromanager.multiresviewer.MetadataPanel metadataPanelMagellan_;
   private javax.swing.JPanel metadataPanel_;
   private javax.swing.JButton pauseButton_;
   private javax.swing.JCheckBox scaleBarCheckBox_;
   private javax.swing.JButton showInFolderButton_;
   private javax.swing.JTabbedPane tabbedPane_;
   private javax.swing.JPanel topControlPanel_;
   private javax.swing.JLabel zPosLabel_;
   // End of variables declaration//GEN-END:variables

}
